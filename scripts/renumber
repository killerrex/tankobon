#!/bin/bash

# renumber
#
# Rename files that follow a numbering order, like the pages of a comic.
#
# This script allow to define a parser to detect the number from single and double pages,
# identify wrongly numbered double pages and apply an offset to all the numbers.


set -e

NAME="$(basename "$0")"


SHORT='Nhe:zrs:S:d:j:J:t:T:nawi:f:g'
LONG='dry,help,ext:,empty,reversed,src:,second:,double:,join:,t_join:,tgt:,t_double:,no_double,auto,wrong,ini:,fin:,gap'

usage() {
cat <<-EOF
Renumber batch of files changing the numeration

Usage:
    ${NAME} [options] ini fin delta

Change from ini to fin adding delta

ini and fin can be replaced by 'auto' to try to determine the lower and upper values
from the source pattern.

delta can be =N so the ini element is transformed to N value.


Options:
    -i | --ini N
        Initial page (default a == auto)

    -f | --fin N
        Final page (default a == auto)

    -n | --dry
        Report the changes, but do nothing.

    -e | --ext EXT
        Add the extension to the list of default extensions

    -z | --empty
        Clean the list of extensions

    -r | --reversed
        Double pages follow the right-to-left order ([N+1]-[N].ext)

    -N | --no_double
        Do Not Consider double pages.

    -s | --src PATTERN
        Set the source file pattern (see printf) Default is "${SRC}"

    -j | --join str
        Join the source double page with this tring instead of the default (-)

    -S | --second PATTERN
        Set the pattern for the 2nd group of numbers in double pages. Default equal to single pattern.

    -d | --double PATTERN
        Set the source file pattern (see printf) for double pages instead the build one

    -t | --tgt PATTERN
        Set the target file pattern (see printf) Default is "${TGT}"

    -J | --t_join str
        Join the target double page with this string instead of the default (-)

    -T | --t_double PATTERN
        Set the target file pattern (see printf) for double pages

    -a | --auto
        Replace %c by the chapter number in the patterns
    
    -w | --wrong
        Do not apply the logic to increase the detected wrong double pages

    -g | --gap
        Double pages may be wrongly numbered, but preserving the numeric gap (so n is double page, but next is n+2)

EOF
}


mk_double() {
# Convert a pattern in a double-page pattern
# $1 => Pattern
# $2 => link
# $3 => second group
    local -a parts
    local number
    IFS='/' read -r -a parts < <(sed -r 's:(.*)%(0*)([0-9]*)d(.*):\1/\2/\3/\4:' <<<"$1")
    # Rebuild the pattern for numbers
    number="%${parts[1]}${parts[2]}d"
    local nxt="${3:-${number}}"
    echo "${parts[0]}${number}$2${nxt}${parts[3]}"
}


orientation() {
# Calculate image orientation
# $1 ==> Image
    local -a size

    read -r -a size < <(magick identify -format '%w %h' "$1")

    if [ "${size[0]}" -gt "${size[1]}" ]
    then
        echo "landscape"
    else
        echo "portrait"
    fi
}


single_candidates() {
# Parse the single page pattern and select all the candidates
    local parts
    IFS='/' read -r -a parts < <(
        sed -r 's:(.*)%(0*)([0-9]*)d(.*):\1/\2/\3/\4:' <<<"${SRC}"
    )
    # Parts (replacing %% by % as no printf is used):
    local prefix="${parts[0]//%%/%}"
    local z="${parts[1]}"
    local w="${parts[2]}"
    local suffix="${parts[3]//%%/%}"

    local pattern
    if [ -z "$w" ]
    then
        # No number...
        if [ "$z" == "0" ]
        then
            # printf xxx_%0d 11 ==> xxx_
            echo "Error: Any %0d pattern will produce no output"
            exit 10
        fi
        # Case %d
        pattern='[0-9]+'
    elif [ "$z" == "0" ]
    then
        # Case %0nd
        pattern="[0-9]{$w}"
    else
        # Case %nd
        pattern="[0-9 ]{$((w-1))}[0-9]"
    fi

    local candidates=()
    local ext
    local matches
    for ext in "${EXT[@]}"
    do
        matches=("${prefix}"*"${suffix}.${ext}")
        # If no match [0] contains the glob
        if [ ! -f "${matches[0]}" ]
        then
            continue
        fi
        candidates+=("${matches[@]%.${ext}}")
    done

    if [ ${#candidates[@]} -eq 0 ]
    then
        return
    fi

    if [ -n "${prefix}" ]
    then
        candidates=("${candidates[@]#"${prefix}"}")
    fi

    if [ -n "${suffix}" ]
    then
        candidates=("${candidates[@]%"${suffix}"}")
    fi

    local m v
    for m in "${candidates[@]}"
    do
        if [[ "$m" =~ ^${pattern}$ ]]
        then
            v="$m"
        else
            continue
        fi
        # Convert to decimal number no matter the leading zeros
        v=$((10#${v// }))
        LOW=$(( (v < LOW) ? v : LOW))
        UPP=$(( (UPP < v) ? v : UPP))
    done
}


double_candidates() {
# Parse the double page pattern and select all the candidates

    # Get the pattern for the double pages
    IFS='/' read -r -a parts < <(
        sed -r 's:(.*)%(0*)([0-9]*)d([^%]*)%(0*)([0-9]*)d(.*):\1/\2/\3/\4/\5/\6/\7:' <<<"${DBL_SRC}"
    )
    # Replace any %% by % as we are not using printf here
    local prefix="${parts[0]//%%/%}"
    local z1="${parts[1]}"
    local w1="${parts[2]}"
    local middle="${parts[3]//%%/%}"
    local z2="${parts[4]}"
    local w2="${parts[5]}"
    local suffix="${parts[6]//%%/%}"

    # If any of the patterns is variable and there is no gap, it is an error
    if [ -z "${middle}" ] && { [ -z "$w1" ] || [ -z "$w2" ]; }
    then
        echo "Error: Invalid Double pattern (${DBL_SRC}) Get sure it has two %d elements"
        exit 20
    fi

    local pattern
    if [ -z "$w1" ]
    then
        # No fix number of digits...
        if [ "$z1" == "0" ]
        then
            # printf xxx_%0d 11 ==> xxx_
            echo "Error: Any %0d pattern will produce no output"
            exit 10
        fi
        # Case %d
        pattern='[0-9]+'
    elif [ "$z1" == "0" ]
    then
        # Case %0nd
        pattern="[0-9]{$w1}"
    else
        # Case %nd
        pattern="[0-9 ]{$((w1-1))}[0-9]"
    fi

    if [ -z "$w2" ]
    then
        # No number...
        if [ "$z2" == "0" ]
        then
            # printf xxx_%0d 11 ==> xxx_
            echo "Error: Any %0d pattern will produce no output"
            exit 10
        fi
        # Case %d
        pattern="${pattern} [0-9]+"
    elif [ "$z1" == "0" ]
    then
        # Case %0nd
        pattern="${pattern} [0-9]{$w2}"
    else
        # Case %nd
        pattern="${pattern} [0-9 ]{$((w2-1))}[0-9]"
    fi

    local candidates=()
    local ext matches
    for ext in "${EXT[@]}"
    do
        matches=("${prefix}"*"${middle}"*"${suffix}.${ext}")
        # If no match [0] contains the glob
        if [ ! -f "${matches[0]}" ]
        then
            continue
        fi
        candidates+=("${matches[@]%.${ext}}")
    done

    if [ ${#candidates[@]} -eq 0 ]
    then
        return
    fi

    if [ -n "${prefix}" ]
    then
        candidates=("${candidates[@]#"${prefix}"}")
    fi

    if [ -n "${suffix}" ]
    then
        candidates=("${candidates[@]%"${suffix}"}")
    fi

    if [ -n "${middle}" ]
    then
        candidates=("${candidates[@]/"${middle}"/ }")
    fi

    local m v w
    for m in "${candidates[@]}"
    do
        if [[ "$m" =~ ^${pattern}$ ]]
        then
            if [ "${REVERSED}" == 'yes' ]
            then
                w="${m% *}"
                v="${m#* }"
            else
                v="${m% *}"
                w="${m#* }"
            fi
        else
            continue
        fi
        # Convert to decimal number no matter the leading zeros
        v=$((10#${v// }))
        w=$((10#${w// }))
        if ((w != v + 1))
        then
            # DBL_SRC contains the string format
            # shellcheck disable=SC2059
            echo "Invalid double page: $m => $(printf "${DBL_SRC}" $v $w)"
            exit 200
        fi
        LOW=$(( (v < LOW) ? v : LOW))
        UPP=$(( (UPP < w) ? v : UPP))
    done
}

###############################################################################
###
### Parse the command line and start the main block
###
###############################################################################

if ! TEMP=$(getopt -o "${SHORT}0123456789" --longoptions "${LONG}" -n "${NAME}" -- "$@")
then
    echo "Terminating..." >&2
    exit 1
fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"


RUN=
REVERSED='no'
GAP='no'
EXT=( 'jpg' 'png' )
SRC='%03d'
NXT=
DBL_SRC=
TGT='%03d'
DBL_TGT=
declare -i accum=0
DOUBLE='yes'
JOIN='-'
T_JOIN='-'
AUTO='yes'
CHAPTER='no'
ini='a'
fin='a'

while true
do
    case "$1" in
    -[0-9])
        accum=$((accum*10 + $1))
    ;;
    '-i' | '--ini')
        ini=$((10#$2))
        shift
    ;;
    '-f' | '--fin')
        fin=$((10#$2))
        shift
    ;;
    '-n' | '--dry')
        RUN='echo'
    ;;
    '-e' | '--ext')
        EXT+=("$2")
        shift
    ;;
    '-z' | '--empty')
        EXT=()
    ;;
    '-r' | '--reversed')
        REVERSED='yes'
    ;;
    '-g' | '--gap')
        GAP='yes'
    ;;
    '-s' | '--src')
        SRC="$2"
        shift
    ;;
    '-S' | '--second')
        NXT="$2"
        shift
    ;;
    '-d' | '--double')
        DBL_SRC="$2"
        shift
    ;;
    '-j' | '--join')
        JOIN="$2"
        shift
    ;;
    '-J' | '--t_join')
        T_JOIN="$2"
        shift
    ;;
    '-t' | '--tgt')
        TGT="$2"
        shift
    ;;
    '-T' | '--t_double')
        DBL_TGT="$2"
        shift
    ;;
    '-N' | '--no_double')
        DOUBLE='no'
    ;;
    '-a' | '--auto')
        CHAPTER='yes'
    ;;
    '-w' | '--wrong')
        AUTO='no'
    ;;
    '-h' | '--help')
        usage
        exit 2
    ;;
    --)
        shift
        break
    ;;
    *)
        echo "Internal error!"
        exit 1
    ;;
    esac
    shift
done

###############################################################################
# Normal options processing here
#
case "$#" in
0)
    # If no arguments but accum is not 0 means the delta is given as -N
    if [ ${accum} == 0 ]
    then
        echo "Not enough arguments"
        usage
        exit 2
    fi
    inc="${accum}"
;;
1)
    if [ ${accum} -ne 0 ]
    then
        echo "Error: Two deltas in command line, abort"
        exit 3
    fi
    inc="$1"
;;
*)
    echo "Too many arguments: $*"
    exit 20
;;
esac


# Avoid problems in the pattern: do not accept patterns with /
if  [ "${SRC#*/}" != "${SRC}" ] || [ "${NXT#*/}" != "${NXT}" ]
then
    echo "Do not use '/' in the pattern or the system gets confused"
    exit 10
fi

# prepare the double patterns
if [ "${DOUBLE}" == 'yes' ]
then
    if [ -z "${DBL_SRC}" ]
    then
        DBL_SRC="$(mk_double "${SRC}" "${JOIN}" "${NXT}")"
    fi

    if [ -z "${DBL_TGT}" ]
    then
        DBL_TGT="$(mk_double "${TGT}" "${T_JOIN}")"
    fi
fi


# Replace %c with the chapter number
if [ "${CHAPTER}" == 'yes' ]
then
    ch_num=$(realpath . | sed -r 's/.*[^0-9]([0-9]+)$/\1/')
    ch_dig=$((10#${ch_num}))
    echo "Detected chapter number %c=${ch_num} %C=${ch_dig}"
    SRC="${SRC//%c/${ch_num}}"
    DBL_SRC="${DBL_SRC//%c/${ch_num}}"
    SRC="${SRC//%C/${ch_dig}}"
    DBL_SRC="${DBL_SRC//%C/${ch_dig}}"
fi

echo "Read patterns:"
echo "  Single: ${SRC}"
echo "  Double: ${DBL_SRC}"


if [ "${ini}" == "a" ] || [ "${fin}" == "a" ]
then
    LOW=$((2**63-1))
    UPP=0
    single_candidates
    double_candidates


    if [ ${LOW} -gt ${UPP} ]
    then
        echo "No valid candidates found"
        exit 100
    fi
    
    [ "${ini}" == 'a' ] && ini=${LOW}
    [ "${fin}" == 'a' ] && fin=${UPP}

    echo "Auto Range [${ini} --> ${fin}]"
else
    echo "User Range [${ini} --> ${fin}]"
fi


# Auto-delta? 
if [[ "${inc}" =~ ^([0-9]*|[if])=([0-9]+)$ ]]
then
    ref="${BASH_REMATCH[1]}"
    if [ -z "${ref}" ] || [ "${ref}" == 'i' ]
    then
        ref="${ini}"
    elif [ "${ref}" == 'f' ]
    then
        ref="${fin}"
    else
        ref=$((10#$ref))
    fi
    val="$((10#${BASH_REMATCH[2]}))"
    # Inc is really the value that ini shall have so
    #  ini_out = ini + inc_real = inc ==> inc_real = inc - ini
    inc=$((val - ref))
    echo "Auto Increment set to ${inc} so ${ref} ==> $((ref + inc))"
elif [[ "${inc}" =~ ^([+-])?([0-9]+)$ ]]
then
    # Avoid problems when the user types +09 as increment
    inc="$((${BASH_REMATCH[1]}1 * 10#${BASH_REMATCH[2]}))"
    echo "Apply increment of $(printf %+d "${inc}")"
else
    echo "Invalid increment: ${inc}"
    exit 100
fi


# Avoid overwriting:
# The safe cases are:
#  - inc > 0 and counting from high to low (so 10 -> 11, 9->10 ...)
#  - inc < 0 and counting from low to high (so 9->8, 10->9 ...)
# Otherwise invert the borders
if [ "$((inc * (fin - ini)))" -gt 0 ]
then
    tmp="${ini}"
    ini="${fin}"
    fin="${tmp}"
fi

if [ "${ini}" -gt "${fin}" ]
then
    delta='-1'
else
    delta='1'
fi


# We want the loop inclusive
declare -A wrong
declare -A exist
t0=$((2**63-1))
tf=0
for ((k=ini; k!=fin+delta; k+=delta))
do
    t=$((k+inc))
    for ext in "${EXT[@]}"
    do
        # Try first with a single page
        # SRC and TGT contains the proper format
        # shellcheck disable=SC2059
        printf -v origin "${SRC}.${ext}" "$k"
        # shellcheck disable=SC2059
        printf -v target "${TGT}.${ext}" $t
        if [ -f "${origin}" ]
        then
            ori="$(orientation "${origin}")"
            if [ "${origin}" != "${target}" ]
            then
                ${RUN} mv -i "${origin}" "${target}"
            fi
            if [ "${ori}" == "landscape" ]
            then
                echo "Possible double page: ${origin} <=> ${target}"
                wrong[$t]='y'
            fi
            # Keep track of the transformed range
            t0=$(( t < t0 ? t : t0))
            tf=$(( tf < t ? t : tf))
            exist["${target}"]='y'
        fi

        [ "${DOUBLE}" != 'yes' ] && continue

        # Look also for double pages
        if [ "${REVERSED}" == 'yes' ]
        then
            # Using right to left numbering, so a double page is 010-009.png and not 009-010.png
            # DBL_SRC contains the proper format
            # shellcheck disable=SC2059
            printf -v origin "${DBL_SRC}.${ext}" $((k+1)) "$k"
        else
            # DBL_SRC contains the proper format
            # shellcheck disable=SC2059
            printf -v origin "${DBL_SRC}.${ext}" "$k" $((k+1))
        fi
        # DBL_TGT contains the proper format
        # shellcheck disable=SC2059
        printf -v target "${DBL_TGT}.${ext}" $t $((t+1))
        if [ -f "${origin}" ]
        then
            ori="$(orientation "${origin}")"
            if [ "${origin}" != "${target}" ]
            then
                ${RUN} mv -i "${origin}" "${target}"
            fi
            if [ "${ori}" == "portrait" ]
            then
                echo "Possible single page: ${origin} <=> ${target}"
            fi
            # Do not advance k, maybe the single page 'k+1' also exist
            # Keep track of the transformed range
            t0=$(( t < t0 ? t : t0))
            tf=$(( tf < t ? t : tf))
            exist["${target}"]='y'
        fi
    done
done

# Check if the last page was single or double page to report properly the range
knd='s'
for ext in "${EXT[@]}"
do
    # DBL_TGT contains the proper format
    # shellcheck disable=SC2059
    printf -v target "${DBL_TGT}.${ext}" ${tf} $((tf+1))
    if [ "${exist["${target}"]}" == 'y' ]
    then
        knd='d'
    fi
done

# Report the output range (before correcting double-page)
if [ ${knd} == 's' ]
then
    echo "Transformed output $t0 --> $tf"
else
    echo "Transformed output $t0 --> $tf-$((tf+1))"
fi

if [ "${AUTO}" != 'yes' ]
then
    exit 0
else
    echo ""
    echo "Auto wrong double page numeration"
fi

# Create the offset map
declare -iA offset
declare -i d=0 n_wrong=0
for ((t=t0; t<=tf; t++))
do
    offset[$t]=$d
    if [ "${wrong[$t]}" == 'y' ]
    then
        n_wrong+=1
        if [ "${GAP}" == 'no' ]
        then
            d+=1
        fi
    fi
done

if [ ${n_wrong} == 0 ]
then
    echo "No wrong double pages found"
    exit 0
else
    echo "Found ${n_wrong} double pages with single page number"
fi

# Renumber the paged from the end to add the number space for the double pages with wrong numeration.
declare -i t k
for ((t=tf; t>=t0; t--))
do
    # Get the proper number for this page
    k=t+offset[$t]
    if [ "${wrong[$t]}" == 'y' ]
    then
        # This is a double page but with a single digit name. Change it to NNN-MMM
        for ext in "${EXT[@]}"
        do
            printf -v f "${TGT}.${ext}" $t
            printf -v g "${DBL_TGT}.${ext}" $k $((k+1))
            if [ "${exist[$f]}" == 'y' ]
            then
                ${RUN} mv -i "$f" "$g"
            fi
        done
    elif [ "$k" == "$t" ]
    then
        # This is a single page with the proper numeration.
        # In normal mode, just do nothing, in dry run mode report that is correct.
        if [ -z "${RUN}" ]
        then
            continue
        fi
        for ext in "${EXT[@]}"
        do
            printf -v f "${TGT}.${ext}" $t
            [ "${exist[$f]}" == 'y' ] && echo "$f ==> correct"
            printf -v f "${DBL_TGT}.${ext}" $t $((t+1))
            [ "${exist[$f]}" == 'y' ] && echo "$f ==> correct"
        done
        continue
    else
        # This is a single or double page but with the wrong numbers.
        # Rename it to make space for the previous pages.
        for ext in "${EXT[@]}"
        do
            printf -v f "${TGT}.${ext}" $t
            if [ "${exist[$f]}" == 'y' ]
            then
                printf -v g "${TGT}.${ext}" $k
                ${RUN} mv -i "$f" "$g"
            fi

            printf -v f "${DBL_TGT}.${ext}" $t $((t+1))
            if [ "${exist[$f]}" == 'y' ]
            then
                printf -v g "${DBL_TGT}.${ext}" $k $((k+1))
                ${RUN} mv -i "$f" "$g"
            fi
        done
    fi
done

# Report the final real range: Check if the last one is single or double
echo ""

knd='s'
for ext in "${EXT[@]}"
do
    printf -v f "${DBL_TGT}.${ext}" ${tf} $((tf+1))
    if [ "${exist[$f]}" == 'y' ]
    then
        knd='d'
    fi
done

# Report the output range (before correcting double-page)
if [ ${knd} == 's' ]
then
    echo "Final output range: ${t0}--> $((tf+d))"
else
    echo "Final output range: ${t0} --> $((tf+d))-$((tf+d+1))"
fi
